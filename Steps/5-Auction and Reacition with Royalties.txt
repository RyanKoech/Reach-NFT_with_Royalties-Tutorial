This section we introduce an interactive command line interface where you directly interact with the application.
We end our shortcomings by asking the owner of Nft if he wants to start or restart an auction.
Let's start by editing our reach code.

$[5-complete=>index.rsh-4,9]
Line 8 provides a method: isAuctionOn, which returns a boolean.

Lines 11 through 15 is where we first see the concept of royalties. A function declaration which will be called when the winning Bidder has been determined and has to new pay up.

Line 41 we make sure the correct royalty is set and Line 42 we assert that.

$[5-complete=>index.rsh-34,51]
Line 46, we add a new variable.
With this variable, we will keep the information whether the auction is requested or not.

Lines 51 through 57 are checking the auction request.
The auctionOn variable is false at startup and after every owner change.
According to the response from the isAuctionOn function, the program terminates or continues.

We update lines 86, 91 and 102.

Line 89 We call the handlePayOut to implement the royalties.

Let's also make the necessary arrangements to tie these changes to the Javascript frontend.

$[5-complete=>index.mjs-33,56]
Line 1 has been updated to import the ask object of @reach-sh/stdlib, the Reach standard library. We'll see how ask is used below.
Lines 2, same as before: importing the standard library and the backend

Lists 5 through 8 are helper functions and constants

Lines 10 through 14 ask the question whether they are playing as Alice and expect a "Yes" or "No" answer. ask.ask presents a prompt and collects a line of input until its argument does not error. ask.yesno errors if it is not given "y" or "n".

Lines 19 through 22 present the user with the choice of creating a test account if they can or inputting a secret to load an existing account.315
Line 25 creates the test account as before
Line 31 loads the existing account.

Line 35 branches based on whether the player is running as Creator, who must deploy the contract, or Bob/Alice, who must attach to it
Lines 36 through 38 deploy it and print out public information (ctc.getInfo) that can be given to the other player when it becomes available.
Lines 40 through 44 request, parse, and process this information.

Lines 50 through 76 defining commend functions for both Creator and Bob/Alice.

Line 78 branches based on whether the player is running as Creator, who must deploy the contract, or Bob/Alice. Line 79 through 115 request for the required information from creator and use it to build upon on the interact object created at line 107 through 112. Lines 118 through 132 defines the biding function for Bob/Alice.

line 136 deterministically loads the contracts and line 137 passes the interact object.

Let’s run the program on at last 3 different terminals and see what happens:

$ ./reach run


Until this step, we made a Javascript command-line interface for our Reach program.
In the next step, we’ll replace this with a Web interface for the same Reach program.